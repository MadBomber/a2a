# frozen_string_literal: true

require_relative 'part'

module A2A
  module Models
    # Represents outputs generated by the agent during a task
    # Artifacts contain Parts (text, file, or data)
    class Artifact
      attr_reader :name, :description, :parts, :index, :append, :last_chunk, :metadata

      def initialize(
        parts:,
        name: nil,
        description: nil,
        index: 0,
        append: nil,
        last_chunk: nil,
        metadata: nil
      )
        @name = name
        @description = description
        @parts = normalize_parts(parts)
        @index = index
        @append = append
        @last_chunk = last_chunk
        @metadata = metadata
      end

      def to_h
        {
          name: name,
          description: description,
          parts: parts.map(&:to_h),
          index: index,
          append: append,
          lastChunk: last_chunk,
          metadata: metadata
        }.compact
      end

      def to_json(*args)
        to_h.to_json(*args)
      end

      def self.from_hash(hash)
        new(
          name: hash[:name] || hash['name'],
          description: hash[:description] || hash['description'],
          parts: (hash[:parts] || hash['parts']).map { |p| Part.from_hash(p) },
          index: hash[:index] || hash['index'] || 0,
          append: hash[:append] || hash['append'],
          last_chunk: hash[:lastChunk] || hash['lastChunk'] || hash[:last_chunk],
          metadata: hash[:metadata] || hash['metadata']
        )
      end

      private

      def normalize_parts(parts)
        parts.map do |part|
          part.is_a?(Part) ? part : Part.from_hash(part)
        end
      end
    end
  end
end
